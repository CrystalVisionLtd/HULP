#ifndef HULP_TOUCH_H_
#define HULP_TOUCH_H_

#include "hulp.h"
#include "soc/touch_channel.h"
#include "soc/sens_reg.h"

#define SWAPPED_TOUCH_INDEX(x) ((x) == (uint8_t)TOUCH_PAD_NUM9 ? (uint8_t)TOUCH_PAD_NUM8 : ((x) == (uint8_t)TOUCH_PAD_NUM8 ? (uint8_t)TOUCH_PAD_NUM9 : (x)))

#define TOUCH_PAD_NO_CHANNEL TOUCH_PAD_GPIO0_CHANNEL

const touch_pad_t gpio_to_touch_num[] = {
    TOUCH_PAD_GPIO0_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_GPIO2_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_GPIO4_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL,
    TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_GPIO12_CHANNEL, TOUCH_PAD_GPIO13_CHANNEL, TOUCH_PAD_GPIO14_CHANNEL, TOUCH_PAD_GPIO15_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, 
    TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_GPIO27_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL,
    TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_NO_CHANNEL, TOUCH_PAD_GPIO32_CHANNEL, TOUCH_PAD_GPIO33_CHANNEL,
};

#define I_TOUCH_GET_PAD_THRESHOLD(touch_num) \
    I_RD_REG((SENS_SAR_TOUCH_THRES1_REG + (4 * (SWAPPED_TOUCH_INDEX(touch_num)/2))), (uint8_t)(SWAPPED_TOUCH_INDEX(touch_num)%2 ? 0 : 16), (uint8_t)(SWAPPED_TOUCH_INDEX(touch_num)%2 ? 15 : 31))

#define I_TOUCH_GET_GPIO_THRESHOLD(gpio_num) \
    I_TOUCH_GET_PAD_THRESHOLD((uint8_t)gpio_to_touch_num[(gpio_num)])

#define I_TOUCH_GET_PAD_VALUE(touch_num) \
    I_RD_REG((SENS_SAR_TOUCH_OUT1_REG + (4 * (SWAPPED_TOUCH_INDEX(touch_num)/2))), (uint8_t)((SWAPPED_TOUCH_INDEX(touch_num)%2) ? 0 : 16), (uint8_t)((SWAPPED_TOUCH_INDEX(touch_num)%2) ? 15 : 31))

#define I_TOUCH_GET_GPIO_VALUE(gpio_num) \
    I_TOUCH_GET_PAD_VALUE((uint8_t)gpio_to_touch_num[(gpio_num)])

#define I_TOUCH_GET_DONE_BIT() \
    I_RD_REG_BIT(SENS_SAR_TOUCH_CTRL2_REG, SENS_TOUCH_MEAS_DONE_S)

#define M_TOUCH_WAIT_DONE() \
    I_TOUCH_GET_DONE_BIT(), \
    I_BL(-1,1)

#define M_TOUCH_BEGIN() \
    I_WR_REG_BIT(SENS_SAR_TOUCH_CTRL2_REG, SENS_TOUCH_START_EN_S, 0), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_CTRL2_REG, SENS_TOUCH_START_EN_S, 1)



//Junk:
#define I_TOUCH_EN(gpio_num, enable) \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_WORKEN_S + SWAPPED_TOUCH_INDEX(gpio_to_touch_num[(gpio_num)])), enable ? 1 : 0)

#define I_TOUCH_INT_SET1_EN(gpio_num, enable) \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_OUTEN1_S + SWAPPED_TOUCH_INDEX(gpio_to_touch_num[(gpio_num)])), enable ? 1 : 0)

#define I_TOUCH_INT_SET2_EN(gpio_num, enable) \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_OUTEN2_S + SWAPPED_TOUCH_INDEX(gpio_to_touch_num[(gpio_num)])), enable ? 1 : 0)

#define I_TOUCH_INT_SET_SOURCE(touch_trigger_source) /*TOUCH_TRIGGER_SOURCE_BOTH / TOUCH_TRIGGER_SOURCE_SET1*/ \
    I_WR_REG_BIT(SENS_SAR_TOUCH_CTRL1_REG, SENS_TOUCH_OUT_1EN_S, TOUCH_TRIGGER_SOURCE)

#define M_TOUCH_SW_READ_PAD_END(touch_num) \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_OUTEN1_S + SWAPPED_TOUCH_INDEX(touch_num)), 0), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_OUTEN2_S + SWAPPED_TOUCH_INDEX(touch_num)), 0), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_WORKEN_S + SWAPPED_TOUCH_INDEX(touch_num)), 0)

#define M_TOUCH_SW_READ_GPIO_END(gpio_num) \
    M_TOUCH_SW_READ_PAD_END((uint8_t)gpio_to_touch_num[(gpio_num)])

#define M_TOUCH_SW_READ_PAD_BEGIN_V(touch_num) \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_OUTEN1_S + SWAPPED_TOUCH_INDEX(touch_num)), 1), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_OUTEN2_S + SWAPPED_TOUCH_INDEX(touch_num)), 1), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_ENABLE_REG, (uint8_t)(SENS_TOUCH_PAD_WORKEN_S + SWAPPED_TOUCH_INDEX(touch_num)), 1), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_CTRL2_REG, SENS_TOUCH_START_EN_S, 0), \
    I_WR_REG_BIT(SENS_SAR_TOUCH_CTRL2_REG, SENS_TOUCH_START_EN_S, 1)

#define M_TOUCH_SW_READ_GPIO_BEGIN_V(gpio_num) \
    M_TOUCH_SW_READ_PAD_BEGIN_V((uint8_t)gpio_to_touch_num[(gpio_num)])

#endif